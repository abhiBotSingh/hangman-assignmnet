{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavsingh/Projects/hangman-assignment/src/components/Popup.js\";\nimport React, { useContext, useEffect } from 'react';\nimport HangmanContext from '../context/HangmanContext';\nimport { checkWinner } from '../helpers/helpers';\n\nconst Popup = () => {\n  const {\n    correctAlphabets,\n    wrongAlphabets,\n    selectedWord,\n    setPlayable,\n    playAgain\n  } = useContext(HangmanContext);\n  let finalMessage = '';\n  let finalMessageRevealWord = '';\n  let playable = true;\n\n  if (checkWinner(correctAlphabets, wrongAlphabets, selectedWord) === 'win') {\n    finalMessage = 'You won! Congratulations!';\n    playable = false;\n  } else if (checkWinner(correctAlphabets, wrongAlphabets, selectedWord) === 'lose') {\n    finalMessage = 'You lost!';\n    finalMessageRevealWord = `...the word was: ${selectedWord}`;\n    playable = false;\n  }\n\n  useEffect(() => {\n    setPlayable(playable);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    style: finalMessage !== '' ? {\n      display: 'flex'\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, finalMessage), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, finalMessageRevealWord), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: playAgain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"Play Again\")));\n};\n\nexport default Popup;","map":{"version":3,"sources":["/Users/abhinavsingh/Projects/hangman-assignment/src/components/Popup.js"],"names":["React","useContext","useEffect","HangmanContext","checkWinner","Popup","correctAlphabets","wrongAlphabets","selectedWord","setPlayable","playAgain","finalMessage","finalMessageRevealWord","playable","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA,cAAnB;AAAmCC,IAAAA,YAAnC;AAAiDC,IAAAA,WAAjD;AAA8DC,IAAAA;AAA9D,MAA2ET,UAAU,CAACE,cAAD,CAA3F;AAEA,MAAIQ,YAAY,GAAG,EAAnB;AACA,MAAIC,sBAAsB,GAAG,EAA7B;AACA,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAIT,WAAW,CAACE,gBAAD,EAAmBC,cAAnB,EAAmCC,YAAnC,CAAX,KAAgE,KAApE,EAA4E;AAC1EG,IAAAA,YAAY,GAAG,2BAAf;AACAE,IAAAA,QAAQ,GAAG,KAAX;AACD,GAHD,MAGO,IAAIT,WAAW,CAACE,gBAAD,EAAmBC,cAAnB,EAAmCC,YAAnC,CAAX,KAAgE,MAApE,EAA6E;AAClFG,IAAAA,YAAY,GAAG,WAAf;AACAC,IAAAA,sBAAsB,GAAI,oBAAmBJ,YAAa,EAA1D;AACAK,IAAAA,QAAQ,GAAG,KAAX;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACI,QAAD,CAAX;AACD,GAFQ,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,KAAK,EAAEF,YAAY,KAAK,EAAjB,GAAsB;AAACG,MAAAA,OAAO,EAAC;AAAT,KAAtB,GAAyC,EAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,YAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,sBAAL,CAFF,eAGE;AAAQ,IAAA,OAAO,EAAEF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CADF;AASD,CA7BD;;AA+BA,eAAeL,KAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport HangmanContext from '../context/HangmanContext';\nimport { checkWinner } from '../helpers/helpers';\n\nconst Popup = () => {\n  const {correctAlphabets, wrongAlphabets, selectedWord, setPlayable, playAgain} = useContext(HangmanContext);\n\n  let finalMessage = '';\n  let finalMessageRevealWord = '';\n  let playable = true;\n\n  if( checkWinner(correctAlphabets, wrongAlphabets, selectedWord) === 'win' ) {\n    finalMessage = 'You won! Congratulations!';\n    playable = false;\n  } else if( checkWinner(correctAlphabets, wrongAlphabets, selectedWord) === 'lose' ) {\n    finalMessage = 'You lost!';\n    finalMessageRevealWord = `...the word was: ${selectedWord}`;\n    playable = false;\n  }\n\n  useEffect(() => {\n    setPlayable(playable);\n  });\n\n  return (\n    <div className=\"popup-container\" style={finalMessage !== '' ? {display:'flex'} : {}}>\n      <div className=\"popup\">\n        <h2>{finalMessage}</h2>\n        <h3>{finalMessageRevealWord}</h3>\n        <button onClick={playAgain}>Play Again</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n"]},"metadata":{},"sourceType":"module"}